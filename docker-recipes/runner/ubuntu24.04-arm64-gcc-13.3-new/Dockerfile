## 1.
FROM ubuntu:24.04 AS base-0

ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
 
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean \
 && apt update -y \
 && apt upgrade -y \
 && apt install -y \
    autoconf \
    automake \
    bzip2 \
    cpio \
    curl \
    emacs-nox \
    file \
    findutils \
    g++ \
    gcc \
    gettext \
    gfortran \
    git \
    gpg \
    iputils-ping \
    jq \
    libffi-dev \
    libgdbm-dev \
    libreadline-dev \
    libssl-dev \
    libudev-dev \
    libxml2-dev \
    locales \
    locate \
    m4 \
    make \
    mercurial \
    ncurses-dev \
    patch \
    pciutils \
    pkgconf \
    python3-pip \
    python3-venv \
    rsync \
    unzip \
    uuid-runtime \
    vim \
    wget \
    zlib1g-dev \
 && apt autoremove --purge

RUN locale-gen en_US.UTF-8 \
 && ln -s `which python3` /usr/bin/python

RUN cd /tmp \
 && curl -LsSf https://astral.sh/uv/install.sh | sh

ENV PATH="/root/.local/bin/:$PATH"
RUN echo 'export PATH=/root/.local/bin/:$PATH' >> /etc/bash.bashrc

RUN curl --silent "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip" \
 && unzip -q awscliv2.zip \
 && ./aws/install \
 && rm -rf awscliv2.zip


## 2.
FROM base-0 AS spack

ARG SPACK_REPO
ARG SPACK_CHECKOUT
ARG SPACK_PACKAGES_CHECKOUT
ARG SPACK_PACKAGES_REPO
ARG SPACK_ROOT
ARG SPACK_PACKAGES_ROOT

RUN git clone --quiet $SPACK_PACKAGES_REPO $SPACK_PACKAGES_ROOT \
 && git -C $SPACK_PACKAGES_ROOT checkout --quiet $SPACK_PACKAGES_CHECKOUT

RUN git clone --quiet $SPACK_REPO $SPACK_ROOT \
 && git -C $SPACK_ROOT checkout --quiet $SPACK_CHECKOUT \
 && . $SPACK_ROOT/share/spack/setup-env.sh \
 && export SPACK_DISABLE_LOCAL_CONFIG=1 \
 && spack repo set --destination $SPACK_PACKAGES_ROOT builtin \
 && spack config --scope site add "config:db_lock_timeout:480" \
 && spack config --scope site add "config:connect_timeout:60"


## 3.
FROM base-0 AS python-build

ARG SPACK_REPO
ARG SPACK_CHECKOUT
ARG SPACK_PACKAGES_CHECKOUT
ARG SPACK_PACKAGES_REPO
ARG SPACK_ROOT
ARG SPACK_PACKAGES_ROOT
ARG PYTHON_MIRROR
ARG PYTHON_PARENT_PATH
ARG PYTHON_VERSION

COPY --from=spack $SPACK_ROOT $SPACK_ROOT
COPY --from=spack $SPACK_PACKAGES_ROOT $SPACK_PACKAGES_ROOT

COPY /0001-python-add-v3.12.11.patch /
RUN git -c user.name=docker -c user.email=docker -C $SPACK_PACKAGES_ROOT am < 0001-python-add-v3.12.11.patch 

RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/uv \
    export UV_LINK_MODE=copy \
 && uv pip install --system --break-system-packages --upgrade boto3 botocore

COPY /python.spack.yaml $PYTHON_PARENT_PATH/spack.yaml
COPY /build-python.sh /utilities.sh $PYTHON_PARENT_PATH/

WORKDIR $PYTHON_PARENT_PATH
RUN --mount=type=secret,id=AWS_ACCESS_KEY_ID \
    --mount=type=secret,id=AWS_SECRET_ACCESS_KEY \
    --mount=type=secret,id=SIGNING_KEY \
    ./build-python.sh

RUN --mount=type=secret,id=AWS_ACCESS_KEY_ID \
    --mount=type=secret,id=AWS_SECRET_ACCESS_KEY \
    export AWS_ACCESS_KEY_ID=$(cat /run/secrets/AWS_ACCESS_KEY_ID) \
 && export AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/AWS_SECRET_ACCESS_KEY) \
 && . $SPACK_ROOT/share/spack/setup-env.sh \
 && spack buildcache update-index --keys remote \
 && spack mirror rm remote

RUN . $SPACK_ROOT/share/spack/setup-env.sh \
 && spack mirror add --scope site remote https://$PYTHON_MIRROR \
 && spack buildcache keys -it \
 && spack config add "config:install_tree:root:$PYTHON_PARENT_PATH" \
 && spack config add "config:install_tree:projections:all:'{name}-{version}'" \
 && spack config add "config:db_lock_timeout:120" \
 && spack config add "config:connect_timeout:60" \
 && spack -e . install --cache-only \
 && spack load python \
 && which python | grep $PYTHON_VERSION \
 && wget -q https://bootstrap.pypa.io/get-pip.py \
 && python get-pip.py \
 && which pip | grep $PYTHON_VERSION \
 && rm -rf .spack-env



## 4.
FROM base-0 AS base-1

ARG SPACK_REPO
ARG SPACK_CHECKOUT
ARG SPACK_PACKAGES_CHECKOUT
ARG SPACK_PACKAGES_REPO
ARG SPACK_ROOT
ARG SPACK_PACKAGES_ROOT
ARG PYTHON_PARENT_PATH
ARG PYTHON_VERSION

COPY --from=python-build $PYTHON_PARENT_PATH $PYTHON_PARENT_PATH

ENV PATH=$PYTHON_PARENT_PATH/python-$PYTHON_VERSION/bin:$PATH

RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/uv \
    export UV_LINK_MODE=copy \
 && uv pip install --system --upgrade \
      boto3 \
      botocore \
      clingo \
      minio \
      pyyaml \
      requests \
      setuptools \
      wheel

## 5.
FROM base-1 AS tools-build

ARG SPACK_REPO
ARG SPACK_CHECKOUT
ARG SPACK_PACKAGES_CHECKOUT
ARG SPACK_PACKAGES_REPO
ARG SPACK_ROOT
ARG SPACK_PACKAGES_ROOT
ARG TOOLS_MIRROR
ARG TOOLS_PATH

COPY --from=spack $SPACK_ROOT $SPACK_ROOT
COPY --from=spack $SPACK_PACKAGES_ROOT $SPACK_PACKAGES_ROOT

COPY /tools.spack.yaml $TOOLS_PATH/spack.yaml
COPY /build-tools.sh /utilities.sh $TOOLS_PATH

WORKDIR $TOOLS_PATH

RUN --mount=type=secret,id=AWS_ACCESS_KEY_ID \
    --mount=type=secret,id=AWS_SECRET_ACCESS_KEY \
    --mount=type=secret,id=SIGNING_KEY \
    ./build-tools.sh

RUN --mount=type=secret,id=AWS_ACCESS_KEY_ID \
    --mount=type=secret,id=AWS_SECRET_ACCESS_KEY \
    export AWS_ACCESS_KEY_ID=$(cat /run/secrets/AWS_ACCESS_KEY_ID) \
 && export AWS_SECRET_ACCESS_KEY=$(cat /run/secrets/AWS_SECRET_ACCESS_KEY) \
 && . $SPACK_ROOT/share/spack/setup-env.sh \
 && spack buildcache update-index --keys remote \
 && spack mirror rm remote

RUN . $SPACK_ROOT/share/spack/setup-env.sh \
 && spack mirror add --scope site remote https://$TOOLS_MIRROR \
 && spack buildcache keys -it \
 && spack config add "config:install_tree:root:$TOOLS_PATH" \
 && spack config add "config:install_tree:projections:all:'{name}-{version}'" \
 && spack config add "config:db_lock_timeout:120" \
 && spack config add "config:connect_timeout:60" \
 && spack -e . config add "view: $TOOLS_PATH/view" \
 && spack -e . install --cache-only \
 && rm -rf .spack-env


## 6.
FROM base-1 AS runner

ARG TOOLS_PATH

COPY --from=tools-build $TOOLS_PATH $TOOLS_PATH

COPY /setup-bashrc.sh /utilities.sh /
RUN /setup-bashrc.sh \
 && rm -f /setup-bashrc.sh /utilities.sh

RUN updatedb

CMD ["/bin/bash"]

ENV PATH=$TOOLS_PATH/view/bin:$PATH

ENV NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility \
    LANGUAGE=en_US:en \
    LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8